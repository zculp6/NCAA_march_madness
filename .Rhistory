library(nnet)
mod <- multinom(brand~price+income+age,data=coffee)
summary(mod)
newdata <- data.frame(price=4.00, age=32, income=70000)
predict(mod,newdata,type="probs")
est <- coef(mod)["B","price"]
var_est <- vcov(mod)["B:price","B:price"]
est + c(-1,1) * qnorm(.95) * sqrt(var_est)
confint(mod,"price", conf.level=0.9)[,,"B"]
est + c(-1,1) * qnorm(.95) * sqrt(var_est)
confint(mod,"price", conf.level=0.9)[,,"B"]
confint(mod,"price", level=0.9)[,,"B"]
est + c(-1,1) * qnorm(.95) * sqrt(var_est)
confint(mod,"price", level=0.9)[,,"B"]
# To get the z-values, calculate coef/se
summary(mod)
# To get the z-values, calculate coef/se
summary(mod)$standard.errors
z <- summary(mod)$coefficients/summary(mod)$standard.erros
z
p <- 2*pnorm(abs(z), lower.tail=FALSE)
p
summary(mod)$coefficients
summary(mod)$standard.erros
# To get the z-values, calculate coef/se
z <- summary(mod)$coefficients/summary(mod)$standard.errors
z
p <- 2*pnorm(abs(z), lower.tail=FALSE)
p
z <- summary(mod)$coefficients/summary(mod)$standard.errors
z
p <- 2*pnorm(abs(z), lower.tail=FALSE)
p
z_p_values <- function(brand, var, combined){
est = coef(mod)[brand, var]
var = vcov(mod)[combined,combined]
z = est / sqrt(var)
p = 2*pnorm(abs(z),lower.tail=FALSE)
return(c(z,p))
}
z_p_values("B", "price", "B:price")
z_p_values("C", "price", "C:price")
z_p_values("B", "age", "B:age")
z_p_values("C", "age", "C:age")
z_p_values("B", "income", "B:income")
z_p_values("C", "income", "C:income")
p
anova(mod_red,mod_full)
mod_red <- multinom(brand~1, coffee)
mod_full <- multinom(brand~age, coffee)
anova(mod_red,mod_full)
p
anova(mod_red,mod_full)
chi2 <- deviance(mod_red) - deviance(mod_full)
p <- pchisq(chi2,df=2,lower.tail = FALSE)
chi2
p
library(caret)
actual <- factor(coffee$brand)
predicted <- factor(predict(mod))
conf_mat <- confusionMatrix(actual,predicted)
print(conf_mat)
# Let's look at the prediciton for both models
predicted <- factor(predict(mod_red))
conf_mat <- confusionMatrix(actual,predicted)
predicted <- factor(predict(mod_red))
conf_mat <- confusionMatrix(actual,predicted)
# Let's look at the prediciton for both models
predicted <- predict(mod_red)
conf_mat <- confusionMatrix(actual,predicted)
print(conf_mat)
predicted <- predict(mod)
conf_mat <- confusionMatrix(actual,predicted)
print(conf_mat)
library(caret)
actual <- factor(coffee$brand)
# Let's look at the prediciton for both models
predicted <- predict(mod)
conf_mat <- confusionMatrix(actual,predicted)
print(conf_mat)
predicted_price <- as.factor(predict(mod_full))
conf_mat_price <- confusionMatrix(actual,predicted_price)
print(conf_mat_price)
predicted_price <- predict(mod_full)
conf_mat_price <- confusionMatrix(actual,predicted_price)
print(conf_mat_price)
library(caret)
actual <- factor(coffee$brand)
# Let's look at the prediciton for both models
predicted <- predict(mod)
conf_mat <- confusionMatrix(actual,predicted)
print(conf_mat)
# Let's look at the prediciton for both models
predicted <- predict(mod_red)
conf_mat <- confusionMatrix(actual,predicted)
print(conf_mat)
conf_mat <- confusionMatrix(data=predicted,reference=actual)
print(conf_mat)
# Let's look at the prediciton for both models
predicted <- predict(mod)
conf_mat <- confusionMatrix(data=predicted,reference=actual)
print(conf_mat)
anova(mod_red,mod_full)
predicted_price <- predict(mod_full)
conf_mat_price <- confusionMatrix(actual,predicted_price)
print(conf_mat_price)
devtools::install_github("andreweatherman/cbbdata")
library("cbbdata")
cbbdata::cbd_create_account(username = 'zculp', email = 'zachculp6@gmail.com', password = 'Zc10162001!', confirm_password = 'Zc10162001!')
#cbbdata::cbd_create_account(username = 'zculp', email = 'zachculp6@gmail.com', password = 'Zc10162001!', confirm_password = 'Zc10162001!')
cbbdata::cbd_login(username = 'zculp', password = 'Zc10162001!')
cbbdata::cbd_login()
cbbdata::cbd_login()
cbbdata::cbd_torvik_team_factors(year=2025, no_bias = TRUE)
cbb_25 <- cbbdata::cbd_torvik_team_factors(year=2025, no_bias = TRUE)
write.csv(cbb_25, "cbb_25.csv", row.names=FALSE)
devtools::install_github("andreweatherman/cbbdata") # free package in R
library("cbbdata")
cbbdata::cbd_login()
cbb_25 <- cbbdata::cbd_torvik_team_factors(year=2025, no_bias = TRUE)
write.csv(cbb_25, "cbb_25.csv", row.names=FALSE)
cbbdata::cbd_available_datasets()
library("cbbdata")
cbbdata::cbd_login()
cbb_25 <- cbbdata::cbd_torvik_team_factors(year=2025, no_bias = TRUE)
write.csv(cbb_25, "cbb_25.csv", row.names=FALSE)
cbbdata::cbd_available_datasets()
cbd_available_datasets()
?cbbdata::cbd_torvik_team_factors
cbb_25 <- cbbdata::cbd_torvik_team_factors(year=2025, no_bias = F)
cbb_25
cbb_25 <- cbbdata::cbd_torvik_team_factors(year=2025, no_bias = T)
?cbbdata
install.packages("rvest")
install.packages("readr") # For writing CSV files
library(rvest)
library(readr)
# URL of the Bart Torvik Women's T-Rank page
url <- "https://barttorvik.com/ncaaw/trank.php#"
# Read the webpage
webpage <- read_html(url)
install.packages("rvest")
install.packages("readr") # For writing CSV files
library(rvest)
library(readr)
# URL of the Bart Torvik Women's T-Rank page
url <- "https://barttorvik.com/ncaaw/trank.php#"
# Read the webpage
webpage <- read_html(url)
# Save to CSV
write_csv(wbb_data, "C:/Users/ASUS/OneDrive/Desktop/Python/NCAA_Project/NCAA_march_madness/barttorvik_wbb_2025.csv")
library(rvest)
library(readr)
# URL of the Bart Torvik Women's T-Rank page
url <- "https://barttorvik.com/ncaaw/trank.php#"
# Read the webpage
webpage <- read_html(url)
# Save to CSV
write_csv(wbb_data, "C:/Users/ASUS/OneDrive/Desktop/Python/NCAA_Project/NCAA_march_madness/barttorvik_wbb_2025.csv")
# URL of the Bart Torvik Women's T-Rank page
url <- "https://barttorvik.com/ncaaw/trank.php#"
# Read the webpage
webpage <- read_html(url)
# URL of the Bart Torvik Women's T-Rank page
url <- "https://barttorvik.com/ncaaw/trank.php#"
# Read the webpage
webpage <- read_html(url)
# URL of the Bart Torvik Women's T-Rank page
url <- "https://barttorvik.com/ncaaw/trank.php#"
# Read the webpage
webpage <- read_html(url)
# Convert to a data frame
wbb_data <- tables[[1]]
# Save to CSV
write_csv(wbb_data, "C:/Users/ASUS/OneDrive/Desktop/Python/NCAA_Project/NCAA_march_madness/barttorvik_wbb_2025.csv")
library(rvest)
library(readr)
# URL of the Bart Torvik Women's T-Rank page
url <- "https://barttorvik.com/ncaaw/trank.php#"
# Read the webpage
webpage <- read_html(url)
install.packages("httr")
library(httr)
response <- GET("https://barttorvik.com/ncaaw/trank.php")
install.packages("httr")
library(httr)
response <- GET("https://barttorvik.com/ncaaw/trank.php")
response
print(response$status_code)
install.packages("rvest")
install.packages("readr")
library(rvest)
library(readr)
# Read the HTML content from the webpage
url <- "https://barttorvik.com/ncaaw/trank.php"
webpage <- read_html(url)
# Read the HTML content
html_content <- content(response, as = "text")
# Print the first 500 characters of the HTML content to see what's being returned
cat(substr(html_content, 1, 500))
install.packages("RSelenium")
library(RSelenium)
# Start RSelenium with Chrome browser (you can use Firefox or other supported browsers)
driver <- rsDriver(browser = "chrome", port = 4445L)
remote_driver <- driver$client
# Navigate to the Bart Torvik Women's Basketball T-Rank page
remote_driver$navigate("https://barttorvik.com/ncaaw/trank.php")
cbd_torvik_team_factors <- function(year = NULL, gender = "M", venue = "all", game_type = "all",
quad = "4", top = 0, start = NULL, end = NULL, no_bias = FALSE) {
suppressWarnings({
# default PC user-agent gets blocked on barttorvik.com
local_options(HTTPUserAgent='CBB-DATA')
if (no_bias) {
start <- glue('{year-1}-11-01')
}
# Validate gender input
if (!(gender %in% c("M", "W"))) {
cli::cli_abort("Invalid gender input. Use 'M' for men's or 'W' for women's data.")
}
# Get conference info
if (is.null(year)) {
parsed_year <- ifelse(is.null(start), lubridate::year(end), lubridate::year(start))
conf_info <- cbbdata::cbd_torvik_ratings(year = parsed_year) %>% distinct(team, conf)
} else {
conf_info <- cbbdata::cbd_torvik_ratings(year = year) %>% distinct(team, conf)
}
# Validate inputs
cbbdata:::validate_input(venue, c('all', 'home', 'away', 'neutral', 'road'), "Please input correct venue value (see details)")
cbbdata:::validate_input(game_type, c('all', 'nc', 'conf', 'reg', 'post', 'ncaa'), "Please input correct type value (see details)")
cbbdata:::validate_input(quad, c('1', '2', '3', '4', 'all'), "Please input correct quad value (see details)")
# Convert arguments to URL naming conventions
v <- switch(venue, all = "All", home = "H", away = "A", neutral = "N", road = "A-N")
t <- switch(game_type, all = "All", nc = "N", conf = "C", reg = "R", post = "P", ncaa = "T")
q <- switch(quad, '0' = "1", '1' = "2", '2' = "3", '3' = "4", '4' = "5")
# Select the correct URL based on gender
base_url <- ifelse(gender == "M", "https://barttorvik.com/trank.php", "https://barttorvik.com/ncaaw/trank.php")
data_url <- glue("{base_url}?year={year}&quad={q}&venue={v}&type={t}&top={top}&start={start}&end={end}#csv=1")
# Set column names
data_names <- c("team", "adj_o", "adj_d", "barthag", "drop", "wins", "games", "efg", "def_efg", "ftr", "def_ftr",
"tov_rate", "def_tov_rate", "oreb_rate", "dreb_rate", "drop2", "two_pt_pct", "def_two_pt_pct", "three_pt_pct",
"def_three_pt_pct", "block_rate", "block_rate_allowed", "assist_rate", "def_assist_rate", "three_fg_rate",
"def_three_fg_rate", "adj_t", "drop3", "drop4", "drop5", "year", "drop6", "drop7", "drop8", "wab", "ft_pct", "def_ft_pct")
# Read and clean data
data <- read_csv(data_url, col_names = FALSE, show_col_types = FALSE) %>%
setNames(data_names) %>%
left_join(conf_info, by = 'team') %>%
mutate(losses = games - wins) %>%
select(team, conf, games, wins, losses, adj_t, adj_o, adj_d, barthag, efg, def_efg, ftr, def_ftr,
oreb_rate, dreb_rate, tov_rate, def_tov_rate, two_pt_pct, three_pt_pct, ft_pct, def_two_pt_pct,
def_three_pt_pct, def_ft_pct, three_fg_rate, def_three_fg_rate, block_rate, block_rate_allowed,
assist_rate, def_assist_rate, wab, year) %>%
arrange(desc(barthag))
return(data)
})
}
cbd_torvik_team_factors(year=2024, gender="F")
if (no_bias) {
start <- glue('{year-1}-11-01')
}
# Validate gender input
if (!(gender %in% c("M", "W"))) {
cli::cli_abort("Invalid gender input. Use 'M' for men's or 'W' for women's data.")
}
# Validate inputs
cbbdata:::validate_input(venue, c('all', 'home', 'away', 'neutral', 'road'), "Please input correct venue value (see details)")
# Convert arguments to URL naming conventions
v <- switch(venue, all = "All", home = "H", away = "A", neutral = "N", road = "A-N")
# Select the correct URL based on gender
base_url <- ifelse(gender == "M", "https://barttorvik.com/trank.php", "https://barttorvik.com/ncaaw/trank.php")
cbd_torvik_team_factors(year=2024, gender="F")
# default PC user-agent gets blocked on barttorvik.com
local_options(HTTPUserAgent='CBB-DATA')
library(withr)
# Validate inputs
cbbdata:::validate_input(venue, c('all', 'home', 'away', 'neutral', 'road'), "Please input correct venue value (see details)")
library(glue)
suppressWarnings({
# default PC user-agent gets blocked on barttorvik.com
local_options(HTTPUserAgent='CBB-DATA')
if (no_bias) {
start <- glue('{year-1}-11-01')
}
# Validate gender input
if (!(gender %in% c("M", "W"))) {
cli::cli_abort("Invalid gender input. Use 'M' for men's or 'W' for women's data.")
}
# Get conference info
if (is.null(year)) {
parsed_year <- ifelse(is.null(start), lubridate::year(end), lubridate::year(start))
conf_info <- cbbdata::cbd_torvik_ratings(year = parsed_year) %>% distinct(team, conf)
} else {
conf_info <- cbbdata::cbd_torvik_ratings(year = year) %>% distinct(team, conf)
}
# Validate inputs
cbbdata:::validate_input(venue, c('all', 'home', 'away', 'neutral', 'road'), "Please input correct venue value (see details)")
cbbdata:::validate_input(game_type, c('all', 'nc', 'conf', 'reg', 'post', 'ncaa'), "Please input correct type value (see details)")
cbbdata:::validate_input(quad, c('1', '2', '3', '4', 'all'), "Please input correct quad value (see details)")
# Convert arguments to URL naming conventions
v <- switch(venue, all = "All", home = "H", away = "A", neutral = "N", road = "A-N")
t <- switch(game_type, all = "All", nc = "N", conf = "C", reg = "R", post = "P", ncaa = "T")
q <- switch(quad, '0' = "1", '1' = "2", '2' = "3", '3' = "4", '4' = "5")
# Select the correct URL based on gender
base_url <- ifelse(gender == "M", "https://barttorvik.com/trank.php", "https://barttorvik.com/ncaaw/trank.php")
data_url <- glue("{base_url}?year={year}&quad={q}&venue={v}&type={t}&top={top}&start={start}&end={end}#csv=1")
# Set column names
data_names <- c("team", "adj_o", "adj_d", "barthag", "drop", "wins", "games", "efg", "def_efg", "ftr", "def_ftr",
"tov_rate", "def_tov_rate", "oreb_rate", "dreb_rate", "drop2", "two_pt_pct", "def_two_pt_pct", "three_pt_pct",
"def_three_pt_pct", "block_rate", "block_rate_allowed", "assist_rate", "def_assist_rate", "three_fg_rate",
"def_three_fg_rate", "adj_t", "drop3", "drop4", "drop5", "year", "drop6", "drop7", "drop8", "wab", "ft_pct", "def_ft_pct")
# Read and clean data
data <- read_csv(data_url, col_names = FALSE, show_col_types = FALSE) %>%
setNames(data_names) %>%
left_join(conf_info, by = 'team') %>%
mutate(losses = games - wins) %>%
select(team, conf, games, wins, losses, adj_t, adj_o, adj_d, barthag, efg, def_efg, ftr, def_ftr,
oreb_rate, dreb_rate, tov_rate, def_tov_rate, two_pt_pct, three_pt_pct, ft_pct, def_two_pt_pct,
def_three_pt_pct, def_ft_pct, three_fg_rate, def_three_fg_rate, block_rate, block_rate_allowed,
assist_rate, def_assist_rate, wab, year) %>%
arrange(desc(barthag))
return(data)
})
data_url <- glue("{base_url}?year={year}#csv=1")
# Read and clean data
data <- read_csv(data_url, col_names = FALSE, show_col_types = FALSE) %>%
setNames(data_names) %>%
left_join(conf_info, by = 'team') %>%
mutate(losses = games - wins) %>%
select(team, conf, games, wins, losses, adj_t, adj_o, adj_d, barthag, efg, def_efg, ftr, def_ftr,
oreb_rate, dreb_rate, tov_rate, def_tov_rate, two_pt_pct, three_pt_pct, ft_pct, def_two_pt_pct,
def_three_pt_pct, def_ft_pct, three_fg_rate, def_three_fg_rate, block_rate, block_rate_allowed,
assist_rate, def_assist_rate, wab, year) %>%
arrange(desc(barthag))
library(dplyr)
cbd_torvik_team_factors(year=2024, gender="F")
library(dplyr)
library(httr)
library(glue)
library(readr)
library(lubridate)
library(cbbdata)
cbd_torvik_team_factors <- function(year = NULL, gender = "M") {
suppressWarnings({
# default PC user-agent gets blocked on barttorvik.com
local_options(HTTPUserAgent='CBB-DATA')
# Validate gender input
if (!(gender %in% c("M", "W"))) {
cli::cli_abort("Invalid gender input. Use 'M' for men's or 'W' for women's data.")
}
# Set year if NULL
parsed_year <- ifelse(is.null(year), year(Sys.Date()), year)
conf_info <- cbbdata::cbd_torvik_ratings(year = parsed_year) %>%
distinct(team, conf)
# Select the correct URL based on gender
base_url <- if (gender == "M") {
"https://barttorvik.com/trank.php"
} else {
"https://barttorvik.com/ncaaw/trank.php"
}
data_url <- glue("{base_url}?year={parsed_year}#csv=1")
# Set column names
data_names <- c("team", "adj_o", "adj_d", "barthag", "drop", "wins", "games", "efg", "def_efg", "ftr", "def_ftr",
"tov_rate", "def_tov_rate", "oreb_rate", "dreb_rate", "drop2", "two_pt_pct", "def_two_pt_pct", "three_pt_pct",
"def_three_pt_pct", "block_rate", "block_rate_allowed", "assist_rate", "def_assist_rate", "three_fg_rate",
"def_three_fg_rate", "adj_t", "drop3", "drop4", "drop5", "year", "drop6", "drop7", "drop8", "wab", "ft_pct", "def_ft_pct")
# Read and clean data
data <- read_csv(data_url, col_names = FALSE, show_col_types = FALSE) %>%
setNames(data_names) %>%
left_join(conf_info, by = 'team') %>%
mutate(losses = games - wins) %>%
select(team, conf, games, wins, losses, adj_t, adj_o, adj_d, barthag, efg, def_efg, ftr, def_ftr,
oreb_rate, dreb_rate, tov_rate, def_tov_rate, two_pt_pct, three_pt_pct, ft_pct, def_two_pt_pct,
def_three_pt_pct, def_ft_pct, three_fg_rate, def_three_fg_rate, block_rate, block_rate_allowed,
assist_rate, def_assist_rate, wab, year) %>%
arrange(desc(barthag))
return(data)
})
}
cbd_torvik_team_factors(year=2024, gender="F")
cbd_torvik_team_factors(year=2024, gender="W")
# Read and clean data
data <- read_csv(data_url, col_names = FALSE, show_col_types = FALSE)
library(dplyr)
library(httr)
library(glue)
library(readr)
library(lubridate)
library(cbbdata)
cbd_torvik_team_factors <- function(year = NULL, gender = "M") {
suppressWarnings({
# default PC user-agent gets blocked on barttorvik.com
local_options(HTTPUserAgent='CBB-DATA')
# Validate gender input
if (!(gender %in% c("M", "W"))) {
cli::cli_abort("Invalid gender input. Use 'M' for men's or 'W' for women's data.")
}
# Set year if NULL
parsed_year <- ifelse(is.null(year), year(Sys.Date()), year)
conf_info <- cbbdata::cbd_torvik_ratings(year = parsed_year) %>%
distinct(team, conf)
# Select the correct URL based on gender
base_url <- if (gender == "M") {
"https://barttorvik.com/trank.php"
} else {
"https://barttorvik.com/ncaaw/trank.php"
}
data_url <- glue("{base_url}?year={parsed_year}#csv=1")
# Set column names
data_names <- c("team", "adj_o", "adj_d", "barthag", "drop", "wins", "games", "efg", "def_efg", "ftr", "def_ftr",
"tov_rate", "def_tov_rate", "oreb_rate", "dreb_rate", "drop2", "two_pt_pct", "def_two_pt_pct", "three_pt_pct",
"def_three_pt_pct", "block_rate", "block_rate_allowed", "assist_rate", "def_assist_rate", "three_fg_rate",
"def_three_fg_rate", "adj_t", "drop3", "drop4", "drop5", "year", "drop6", "drop7", "drop8", "wab", "ft_pct", "def_ft_pct")
# Read and clean data
data <- read_csv(data_url, col_names = FALSE, show_col_types = FALSE)
print(data)
data <- data %>%
setNames(data_names) %>%
left_join(conf_info, by = 'team') %>%
mutate(losses = games - wins) %>%
select(team, conf, games, wins, losses, adj_t, adj_o, adj_d, barthag, efg, def_efg, ftr, def_ftr,
oreb_rate, dreb_rate, tov_rate, def_tov_rate, two_pt_pct, three_pt_pct, ft_pct, def_two_pt_pct,
def_three_pt_pct, def_ft_pct, three_fg_rate, def_three_fg_rate, block_rate, block_rate_allowed,
assist_rate, def_assist_rate, wab, year) %>%
arrange(desc(barthag))
return(data)
})
}
cbd_torvik_team_factors(year=2024, gender="W")
# Set column names
data_names <- c("team", "adj_o", "adj_d", "barthag", "drop", "wins", "games", "efg", "def_efg", "ftr", "def_ftr",
"tov_rate", "def_tov_rate", "oreb_rate", "dreb_rate", "drop2", "two_pt_pct", "def_two_pt_pct", "three_pt_pct",
"def_three_pt_pct", "block_rate", "block_rate_allowed", "assist_rate", "def_assist_rate", "three_fg_rate",
"def_three_fg_rate", "adj_t", "drop3", "drop4", "drop5", "year", "drop6", "drop7", "drop8", "wab", "ft_pct", "def_ft_pct")
cbd_torvik_team_factors(year=2024, gender="W")
library(dplyr)
library(httr)
library(glue)
library(readr)
library(lubridate)
library(cbbdata)
cbd_torvik_team_factors <- function(year = NULL, gender = "M") {
suppressWarnings({
# default PC user-agent gets blocked on barttorvik.com
local_options(HTTPUserAgent='CBB-DATA')
# Validate gender input
if (!(gender %in% c("M", "W"))) {
cli::cli_abort("Invalid gender input. Use 'M' for men's or 'W' for women's data.")
}
# Set year if NULL
parsed_year <- ifelse(is.null(year), year(Sys.Date()), year)
conf_info <- cbbdata::cbd_torvik_ratings(year = parsed_year) %>%
distinct(team, conf)
# Select the correct URL based on gender
base_url <- if (gender == "M") {
"https://barttorvik.com/trank.php"
} else {
"https://barttorvik.com/ncaaw/trank.php"
}
data_url <- glue("{base_url}?year={parsed_year}&csv=1")
# Set column names
data_names <- c("team", "adj_o", "adj_d", "barthag", "drop", "wins", "games", "efg", "def_efg", "ftr", "def_ftr",
"tov_rate", "def_tov_rate", "oreb_rate", "dreb_rate", "drop2", "two_pt_pct", "def_two_pt_pct", "three_pt_pct",
"def_three_pt_pct", "block_rate", "block_rate_allowed", "assist_rate", "def_assist_rate", "three_fg_rate",
"def_three_fg_rate", "adj_t", "drop3", "drop4", "drop5", "year", "drop6", "drop7", "drop8", "wab", "ft_pct", "def_ft_pct")
# Read and clean data
data <- read_csv(data_url, col_names = FALSE, show_col_types = FALSE)
print(data)
data <- data %>%
setNames(data_names) %>%
left_join(conf_info, by = 'team') %>%
mutate(losses = games - wins) %>%
select(team, conf, games, wins, losses, adj_t, adj_o, adj_d, barthag, efg, def_efg, ftr, def_ftr,
oreb_rate, dreb_rate, tov_rate, def_tov_rate, two_pt_pct, three_pt_pct, ft_pct, def_two_pt_pct,
def_three_pt_pct, def_ft_pct, three_fg_rate, def_three_fg_rate, block_rate, block_rate_allowed,
assist_rate, def_assist_rate, wab, year) %>%
arrange(desc(barthag))
return(data)
})
}
cbd_torvik_team_factors(year=2024, gender="W")
test_data <- cbd_torvik_team_factors(year=2024, gender="W")
test_data
colnames(test_data)
years <- 2021:2024
combined_data <- bind_rows(lapply(years, function(y) cbd_torvik_team_factors(year = y, gender = "W")))
# View the combined dataset
print(combined_data)
output_file <- "wbb_past_results.csv"
write_csv(combined_data, output_file)
output_file <- "wbb_past_results.csv"
write_csv(combined_data, output_file)
setwd("C:/Users/ASUS/OneDrive/Desktop/Python/NCAA_Project/NCAA_march_madness")
setwd("C:/Users/ASUS/OneDrive/Desktop/Python/NCAA_Project/NCAA_march_madness")
output_file <- "wbb_past_results.csv"
write_csv(combined_data, output_file)
# Output this season's results
this_season <- cbd_torvik_team_factors(2025, gender="W")
write_csv(this_season, "wbb_25.csv")
# Combine data for years 2021-2024
years <- 2021:2024
w_combined_data <- bind_rows(lapply(years, function(y) cbd_torvik_team_factors(year = y, gender = "W")))
# View the combined dataset
#print(combined_data)
output_file <- "wbb_past_results.csv"
write_csv(w_combined_data, output_file)
# Output this season's results
current_women <- cbd_torvik_team_factors(2025, gender="W")
write_csv(current_women, "wbb_25.csv")
men_years <- 2008:2024
m_combined_data <- bind_rows(lapply(years, function(y) cbd_torvik_team_factors(year = y, gender = "M")))
write_csv(m_combined_data, "mbb_past_results.csv")
current_men <- cbd_torvik_team_factors(2025, "M")
write_csv(current_men, "mbb_25.csv")
